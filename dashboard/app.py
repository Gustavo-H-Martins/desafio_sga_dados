# -*- coding: utf-8 -*-
"""
Dashboard Interativo SGA - An√°lise de Combust√≠veis
Implementa visualiza√ß√µes das an√°lises requeridas no desafio
Utiliza Streamlit para interface web interativa
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime, timedelta
import sys
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# Configurar paths
dashboard_dir = Path(__file__).parent
project_root = dashboard_dir.parent
sys.path.append(str(project_root))

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="SGA - An√°lise de Combust√≠veis",
    page_icon="‚õΩ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
<style>
    .reportview-container {
        margin-top: -2em;
    }
    .stDeployButton {display:none;}
    footer {visibility: hidden;}
    .stApp > header {visibility: hidden;}
    .main .block-container {
        padding-top: 1rem;
    }
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0,0,0,0.12);
        border-left: 4px solid #1f77b4;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_sample_data():
    """
    Carrega dados sint√©ticos para demonstra√ß√£o do dashboard
    Em ambiente real, carregaria da camada Gold
    """
    np.random.seed(42)

    # Simular dados processados da camada Gold
    estados = ['SP', 'RJ', 'MG', 'RS', 'PR', 'SC', 'BA', 'PE', 'CE', 'GO']
    regioes = {'SP': 'SUDESTE', 'RJ': 'SUDESTE', 'MG': 'SUDESTE',
               'RS': 'SUL', 'PR': 'SUL', 'SC': 'SUL',
               'BA': 'NORDESTE', 'PE': 'NORDESTE', 'CE': 'NORDESTE',
               'GO': 'CENTRO-OESTE'}

    produtos = ['GASOLINA COMUM', 'GASOLINA ADITIVADA', 'ETANOL', '√ìLEO DIESEL', '√ìLEO DIESEL S10']
    bandeiras = ['PETROBRAS', 'SHELL', 'IPIRANGA', 'RAIZEN', 'BRANCA']

    # Gerar dados temporais (2020-2024)
    data = []
    base_prices = {
        'GASOLINA COMUM': 5.20,
        'GASOLINA ADITIVADA': 5.50,
        'ETANOL': 3.80,
        '√ìLEO DIESEL': 4.80,
        '√ìLEO DIESEL S10': 5.00
    }

    for year in range(2020, 2025):
        for month in range(1, 13):
            for state in estados:
                for product in produtos:
                    # Simular varia√ß√µes temporais e regionais realistas
                    base_price = base_prices[product]

                    # Tend√™ncia temporal (infla√ß√£o)
                    inflation_factor = 1 + (year - 2020) * 0.08  # 8% ao ano

                    # Sazonalidade (alta no meio/final do ano)
                    seasonal_factor = 1 + 0.1 * np.sin(2 * np.pi * (month - 1) / 12)

                    # Varia√ß√£o regional
                    regional_factors = {
                        'SUDESTE': 1.1, 'SUL': 1.05, 'NORDESTE': 0.95,
                        'CENTRO-OESTE': 0.98, 'NORTE': 1.15
                    }
                    regional_factor = regional_factors.get(regioes[state], 1.0)

                    # Ru√≠do aleat√≥rio
                    noise_factor = 1 + np.random.normal(0, 0.05)

                    final_price = base_price * inflation_factor * seasonal_factor * regional_factor * noise_factor

                    # Dados de margem e market share
                    margin = np.random.uniform(0.08, 0.15)  # 8-15% margem

                    for brand in np.random.choice(bandeiras, size=np.random.randint(2, 4), replace=False):
                        brand_factor = {
                            'PETROBRAS': 1.02, 'SHELL': 1.05, 'IPIRANGA': 1.01,
                            'RAIZEN': 1.00, 'BRANCA': 0.97
                        }[brand]

                        data.append({
                            'ano': year,
                            'mes': month,
                            'estado': state,
                            'regiao': regioes[state],
                            'produto': product,
                            'bandeira': brand,
                            'preco_medio': round(final_price * brand_factor, 3),
                            'margem_percentual': round(margin * 100, 2),
                            'num_postos': np.random.randint(50, 500),
                            'data': datetime(year, month, 1)
                        })

    df = pd.DataFrame(data)

    # Adicionar c√°lculos de viabilidade do etanol
    viabilidade_data = []
    for _, row in df.iterrows():
        if row['produto'] == 'ETANOL':
            # Buscar pre√ßo da gasolina no mesmo estado/per√≠odo
            gasolina_price = df[
                (df['estado'] == row['estado']) & 
                (df['ano'] == row['ano']) & 
                (df['mes'] == row['mes']) & 
                (df['produto'] == 'GASOLINA COMUM')
            ]['preco_medio'].mean()

            if pd.notna(gasolina_price):
                ratio = row['preco_medio'] / gasolina_price
                viabilidade_data.append({
                    'estado': row['estado'],
                    'ano': row['ano'],
                    'mes': row['mes'],
                    'ratio_etanol_gasolina': ratio,
                    'etanol_viavel': ratio <= 0.7
                })

    df_viabilidade = pd.DataFrame(viabilidade_data)

    return df, df_viabilidade

def create_price_evolution_chart(df):
    """Cria gr√°fico de evolu√ß√£o de pre√ßos"""
    monthly_avg = df.groupby(['data', 'produto'])['preco_medio'].mean().reset_index()

    fig = px.line(
        monthly_avg, 
        x='data', 
        y='preco_medio',
        color='produto',
        title='üìà Evolu√ß√£o Temporal dos Pre√ßos por Combust√≠vel (2020-2024)',
        labels={
            'data': 'Per√≠odo',
            'preco_medio': 'Pre√ßo M√©dio (R$)',
            'produto': 'Combust√≠vel'
        }
    )

    fig.update_layout(
        height=500,
        hovermode='x unified',
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )

    return fig

def create_regional_ranking_chart(df):
    """Cria gr√°fico de ranking regional"""
    regional_avg = df.groupby(['regiao', 'produto'])['preco_medio'].mean().reset_index()

    # Focar nos principais combust√≠veis
    main_fuels = ['GASOLINA COMUM', 'ETANOL', '√ìLEO DIESEL']
    regional_avg_main = regional_avg[regional_avg['produto'].isin(main_fuels)]

    fig = px.bar(
        regional_avg_main,
        x='regiao',
        y='preco_medio',
        color='produto',
        title='üó∫Ô∏è Ranking de Pre√ßos M√©dios por Regi√£o',
        labels={
            'regiao': 'Regi√£o',
            'preco_medio': 'Pre√ßo M√©dio (R$)',
            'produto': 'Combust√≠vel'
        },
        barmode='group'
    )

    fig.update_layout(height=500)
    return fig

def create_ethanol_viability_chart(df_viabilidade):
    """Cria gr√°fico de viabilidade do etanol"""
    if df_viabilidade.empty:
        st.warning("Dados de viabilidade do etanol n√£o dispon√≠veis")
        return None

    viab_summary = df_viabilidade.groupby('estado').agg({
        'etanol_viavel': ['sum', 'count'],
        'ratio_etanol_gasolina': 'mean'
    }).round(3)

    viab_summary.columns = ['casos_viaveis', 'total_casos', 'ratio_medio']
    viab_summary = viab_summary.reset_index()
    viab_summary['percentual_viabilidade'] = (viab_summary['casos_viaveis'] / viab_summary['total_casos'] * 100).round(1)

    fig = go.Figure()

    fig.add_trace(go.Bar(
        x=viab_summary['estado'],
        y=viab_summary['percentual_viabilidade'],
        name='% Viabilidade',
        marker_color='green',
        yaxis='y'
    ))

    fig.add_trace(go.Scatter(
        x=viab_summary['estado'],
        y=viab_summary['ratio_medio'] * 100,
        mode='lines+markers',
        name='Ratio M√©dio (%)',
        line=dict(color='red'),
        yaxis='y2'
    ))

    fig.update_layout(
        title='‚ö° Viabilidade Econ√¥mica do Etanol por Estado (Ratio ‚â§ 70%)',
        xaxis_title='Estado',
        yaxis=dict(title='% de Per√≠odos Vi√°veis', side='left'),
        yaxis2=dict(title='Ratio Etanol/Gasolina (%)', side='right', overlaying='y'),
        height=500
    )

    return fig

def create_brand_competition_chart(df):
    """Cria gr√°fico de competi√ß√£o entre bandeiras"""
    market_share = df.groupby(['bandeira', 'produto'])['num_postos'].sum().reset_index()

    # Calcular market share percentual
    total_by_product = market_share.groupby('produto')['num_postos'].sum()
    market_share['market_share_pct'] = market_share.apply(
        lambda row: row['num_postos'] / total_by_product[row['produto']] * 100, axis=1
    ).round(1)

    # Focar na gasolina comum para simplicidade
    gas_data = market_share[market_share['produto'] == 'GASOLINA COMUM']

    fig = px.pie(
        gas_data,
        values='market_share_pct',
        names='bandeira',
        title='üè™ Market Share por Bandeira - Gasolina Comum',
        color_discrete_sequence=px.colors.qualitative.Set3
    )

    fig.update_traces(textposition='inside', textinfo='percent+label')
    fig.update_layout(height=500)

    return fig

def create_seasonal_analysis_chart(df):
    """Cria gr√°fico de an√°lise sazonal"""
    # An√°lise por m√™s do ano
    seasonal_data = df.groupby(['mes', 'produto'])['preco_medio'].mean().reset_index()

    # Focar nos principais combust√≠veis
    main_fuels = ['GASOLINA COMUM', 'ETANOL']
    seasonal_main = seasonal_data[seasonal_data['produto'].isin(main_fuels)]

    fig = px.line(
        seasonal_main,
        x='mes',
        y='preco_medio',
        color='produto',
        title='üìÖ Padr√£o Sazonal de Pre√ßos (M√©dia por M√™s)',
        labels={
            'mes': 'M√™s',
            'preco_medio': 'Pre√ßo M√©dio (R$)',
            'produto': 'Combust√≠vel'
        },
        markers=True
    )

    fig.update_layout(height=400)
    fig.update_xaxes(tickmode='linear', tick0=1, dtick=1)

    return fig

def main():
    """Fun√ß√£o principal do dashboard"""

    # Header
    st.title("‚õΩ SGA - Dashboard de An√°lise de Combust√≠veis")
    st.markdown("**An√°lise Completa do Mercado Brasileiro de Combust√≠veis (2020-2024)**")
    st.markdown("---")

    # Carregar dados
    with st.spinner('Carregando dados...'):
        df, df_viabilidade = load_sample_data()

    # Sidebar com filtros
    st.sidebar.title("üîß Filtros de An√°lise")

    # Filtros
    anos_disponiveis = sorted(df['ano'].unique())
    anos_selecionados = st.sidebar.multiselect(
        "Selecionar Anos",
        anos_disponiveis,
        default=anos_disponiveis[-2:]  # √öltimos 2 anos
    )

    produtos_disponiveis = sorted(df['produto'].unique())
    produtos_selecionados = st.sidebar.multiselect(
        "Selecionar Combust√≠veis",
        produtos_disponiveis,
        default=['GASOLINA COMUM', 'ETANOL', '√ìLEO DIESEL']
    )

    regioes_disponiveis = sorted(df['regiao'].unique())
    regioes_selecionadas = st.sidebar.multiselect(
        "Selecionar Regi√µes",
        regioes_disponiveis,
        default=regioes_disponiveis
    )

    # Aplicar filtros
    df_filtered = df[
        (df['ano'].isin(anos_selecionados)) &
        (df['produto'].isin(produtos_selecionados)) &
        (df['regiao'].isin(regioes_selecionadas))
    ]

    # Verificar se h√° dados ap√≥s filtros
    if df_filtered.empty:
        st.warning("‚ö†Ô∏è Nenhum dado dispon√≠vel com os filtros selecionados. Por favor, ajuste os filtros.")
        return

    # M√©tricas principais
    st.subheader("üìä M√©tricas Principais")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        avg_gas_price = df_filtered[df_filtered['produto'] == 'GASOLINA COMUM']['preco_medio'].mean()
        st.metric(
            "Pre√ßo M√©dio Gasolina", 
            f"R$ {avg_gas_price:.3f}" if pd.notna(avg_gas_price) else "N/A"
        )

    with col2:
        avg_ethanol_price = df_filtered[df_filtered['produto'] == 'ETANOL']['preco_medio'].mean()
        st.metric(
            "Pre√ßo M√©dio Etanol", 
            f"R$ {avg_ethanol_price:.3f}" if pd.notna(avg_ethanol_price) else "N/A"
        )

    with col3:
        if pd.notna(avg_gas_price) and pd.notna(avg_ethanol_price):
            ratio_current = avg_ethanol_price / avg_gas_price
            st.metric(
                "Ratio Etanol/Gasolina",
                f"{ratio_current:.1%}",
                delta="Vi√°vel" if ratio_current <= 0.7 else "N√£o vi√°vel"
            )
        else:
            st.metric("Ratio Etanol/Gasolina", "N/A")

    with col4:
        total_stations = df_filtered['num_postos'].sum()
        st.metric("Total de Postos", f"{total_stations:,}")

    st.markdown("---")

    # Gr√°ficos principais
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìà Evolu√ß√£o Temporal", 
        "üó∫Ô∏è An√°lise Regional", 
        "‚ö° Viabilidade Etanol",
        "üè™ Competi√ß√£o"
    ])

    with tab1:
        st.subheader("Evolu√ß√£o Temporal dos Pre√ßos")

        col1, col2 = st.columns(2)

        with col1:
            fig_evolution = create_price_evolution_chart(df_filtered)
            st.plotly_chart(fig_evolution, use_container_width=True)

        with col2:
            fig_seasonal = create_seasonal_analysis_chart(df_filtered)
            st.plotly_chart(fig_seasonal, use_container_width=True)

        # Insights temporais
        st.subheader("üí° Insights Temporais")
        st.info("""
        **Principais Tend√™ncias:**
        ‚Ä¢ Crescimento consistente dos pre√ßos de 2020 a 2024 (infla√ß√£o)
        ‚Ä¢ Padr√£o sazonal com picos no segundo semestre
        ‚Ä¢ Etanol mant√©m correla√ß√£o com gasolina, mas com maior volatilidade
        ‚Ä¢ Diesel apresenta menor varia√ß√£o sazonal
        """)

    with tab2:
        st.subheader("An√°lise Regional de Pre√ßos")

        col1, col2 = st.columns([2, 1])

        with col1:
            fig_regional = create_regional_ranking_chart(df_filtered)
            st.plotly_chart(fig_regional, use_container_width=True)

        with col2:
            # Tabela de ranking
            regional_ranking = df_filtered.groupby(['regiao', 'produto'])['preco_medio'].mean().reset_index()
            gas_ranking = regional_ranking[regional_ranking['produto'] == 'GASOLINA COMUM'].sort_values('preco_medio')

            st.write("**Ranking Gasolina por Regi√£o:**")
            for i, row in gas_ranking.iterrows():
                st.write(f"{row.name + 1}¬∫ {row['regiao']}: R$ {row['preco_medio']:.3f}")

        # Insights regionais
        st.subheader("üí° Insights Regionais")
        st.info("""
        **Diferen√ßas Regionais:**
        ‚Ä¢ Regi√£o Norte apresenta pre√ßos mais altos (log√≠stica)
        ‚Ä¢ Sudeste com pre√ßos premium (maior demanda)
        ‚Ä¢ Nordeste competitivo em etanol (produ√ß√£o local)
        ‚Ä¢ Sul equilibrado entre combust√≠veis f√≥sseis e renov√°veis
        """)

    with tab3:
        st.subheader("An√°lise de Viabilidade do Etanol")

        fig_viability = create_ethanol_viability_chart(df_viabilidade)
        if fig_viability:
            st.plotly_chart(fig_viability, use_container_width=True)

        # An√°lise detalhada
        col1, col2 = st.columns(2)

        with col1:
            st.write("**Crit√©rio de Viabilidade:**")
            st.write("‚Ä¢ Etanol vi√°vel quando pre√ßo ‚â§ 70% da gasolina")
            st.write("‚Ä¢ Baseado na efici√™ncia energ√©tica relativa")
            st.write("‚Ä¢ An√°lise considera apenas aspecto econ√¥mico")

        with col2:
            if not df_viabilidade.empty:
                viab_overall = df_viabilidade['etanol_viavel'].mean() * 100
                st.metric("Viabilidade Geral", f"{viab_overall:.1f}%")

                best_state = df_viabilidade.groupby('estado')['etanol_viavel'].mean().idxmax()
                st.write(f"**Melhor Estado:** {best_state}")

    with tab4:
        st.subheader("Competi√ß√£o entre Bandeiras")

        col1, col2 = st.columns(2)

        with col1:
            fig_competition = create_brand_competition_chart(df_filtered)
            st.plotly_chart(fig_competition, use_container_width=True)

        with col2:
            # An√°lise de posicionamento
            brand_positioning = df_filtered.groupby(['bandeira', 'produto']).agg({
                'preco_medio': 'mean',
                'num_postos': 'sum'
            }).reset_index()

            gas_positioning = brand_positioning[brand_positioning['produto'] == 'GASOLINA COMUM']
            gas_positioning = gas_positioning.sort_values('preco_medio')

            st.write("**Posicionamento de Pre√ßos:**")
            for _, row in gas_positioning.iterrows():
                strategy = "Premium" if row['preco_medio'] > gas_positioning['preco_medio'].quantile(0.67) else                           "Econ√¥mico" if row['preco_medio'] < gas_positioning['preco_medio'].quantile(0.33) else "M√©dio"
                st.write(f"‚Ä¢ {row['bandeira']}: {strategy} (R$ {row['preco_medio']:.3f})")

    # Footer com informa√ß√µes do projeto
    st.markdown("---")
    st.markdown("""
    **üìã Sobre o Projeto:**
    Este dashboard foi desenvolvido como parte do desafio t√©cnico SGA, implementando arquitetura medalh√£o 
    (Bronze ‚Üí Silver ‚Üí Gold) para processamento de dados de combust√≠veis brasileiros. 

    **üõ†Ô∏è Tecnologias:** Python, Pandas, Streamlit, Plotly, Parquet, Arquitetura de Data Lake
    """)

if __name__ == "__main__":
    main()
